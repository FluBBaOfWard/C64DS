
#include "equates.h"
#include "ARM6502/M6502mac.h"

	.end
	.global CPU_reset
	.global op_table
	.global cpustate
	.global mapperstate
	.global rommap
	.global default_scanlinehook
	.global CheckIRQs
	.global PrepareIRQCheck

	.section .itcm

;@----------------------------------------------------------------------------
_00:	;@ BRK
;@----------------------------------------------------------------------------
	mov r11,r11
	ldr r12,=IRQ_VECTOR
	ldr r0,[r10,#lastbank]
	sub r1,m6502_pc,r0
	add r0,r1,#1
	push16					;save PC

	encodeP (B+R)			;save P
	b irq_cont

 .pool
;@----------------------------------------------------------------------------
_01:	;@ ORA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
;@----------------------------------------------------------------------------
_02:	;@ KIL (JAM) [HLT]
_12:
_22:
_32:
_42:
_52:
_62:
_72:
_92:
_B2:
_D2:
	mov r11,r11
_F2:
;@----------------------------------------------------------------------------
	sub m6502_pc,m6502_pc,#1
	clearcycles
	fetch 1
;@----------------------------------------------------------------------------
_03:	;@ SLO ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSLO
	fetch 8
;@----------------------------------------------------------------------------
_05:	;@ ORA $nn
;@----------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
;@----------------------------------------------------------------------------
_06:	;@ ASL $nn
;@----------------------------------------------------------------------------
	doZ
	opASL
	fetch 5
;@----------------------------------------------------------------------------
_07:	;@ SLO $nn
;@----------------------------------------------------------------------------
	doZ
	opSLO
	fetch 5
;@----------------------------------------------------------------------------
_08:	;@ PHP
;@----------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
_09:	;@ ORA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
;@----------------------------------------------------------------------------
_0A:	;@ ASL
;@----------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24	;NZ
	orr cycles,cycles,#CYC_C	;Prepare C
	fetch_c 2					;also subs carry
;@----------------------------------------------------------------------------
_0D:	;@ ORA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
;@----------------------------------------------------------------------------
_0E:	;@ ASL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opASL
	fetch 6
;@----------------------------------------------------------------------------
_0F:	;@ SLO $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSLO
	fetch 6
;@----------------------------------------------------------------------------
;@Branch
;@----------------------------------------------------------------------------
;@	ldrsb r0,[m6502_pc],#1
;@	add m6502_pc,m6502_pc,r0
;@	ldr r1,[r10,#lastbank]
;@	sub r1,m6502_pc,r1
;@	add r1,r1,r0
;@	mov r1,r1,lsl#16
;@	mov m6502_pc,r1,lsr#16
;@	encodePC
;@	fetch 3
;@----------------------------------------------------------------------------
_10:	;@ BPL *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
NoBranch:
	add m6502_pc,m6502_pc,#1
	fetch 2
;@----------------------------------------------------------------------------
_10y:	;@ BPL *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-8
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_11:	;@ ORA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
;@----------------------------------------------------------------------------
_13:	;@ SLO ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSLO
	fetch 8
;@----------------------------------------------------------------------------
_15:	;@ ORA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
;@----------------------------------------------------------------------------
_16:	;@ ASL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opASL
	fetch 6
;@----------------------------------------------------------------------------
_17:	;@ SLO $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSLO
	fetch 6
;@----------------------------------------------------------------------------
_18:	;@ CLC
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
;@----------------------------------------------------------------------------
_19:	;@ ORA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
;@----------------------------------------------------------------------------
_1B:	;@ SLO $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSLO
	fetch 7
;@----------------------------------------------------------------------------
_1D:	;@ ORA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
;@----------------------------------------------------------------------------
_1E:	;@ ASL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opASL
	fetch 7
;@----------------------------------------------------------------------------
_1F:	;@ SLO $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSLO
	fetch 7
;@----------------------------------------------------------------------------
_20:	;@ JSR $nnnn
;@----------------------------------------------------------------------------
	ldrb r2,[m6502_pc],#1
	ldr r1,[r10,#lastbank]
	sub r0,m6502_pc,r1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
;@----------------------------------------------------------------------------
_21:	;@ AND ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
;@----------------------------------------------------------------------------
_23:	;@ RLA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opRLA
	fetch 8
;@----------------------------------------------------------------------------
_24:	;@ BIT $nn
;@----------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
;@----------------------------------------------------------------------------
_25:	;@ AND $nn
;@----------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
;@----------------------------------------------------------------------------
_26:	;@ ROL $nn
;@----------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
;@----------------------------------------------------------------------------
_27:	;@ RLA $nn
;@----------------------------------------------------------------------------
	doZ
	opRLA
	fetch 5
;@----------------------------------------------------------------------------
_28:	;@ PLP
;@----------------------------------------------------------------------------
	pop8 r0
	decodeP
;	sub cycles,cycles,#4*CYCLE
;	b checkirqdisable		;Fixes?
	fetch 4
;@----------------------------------------------------------------------------
_29:	;@ AND #$nn
;@----------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
;@----------------------------------------------------------------------------
_2A:	;@ ROL
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		;NZ
	adc cycles,cycles,cycles		;Set C
	fetch 2
;@----------------------------------------------------------------------------
_0B:	;@ ANC #$nn
_2B:	;@ ANC #$nn
;@----------------------------------------------------------------------------
	readmemimm
	bic cycles,cycles,#CYC_C
	and m6502_a,m6502_a,r0,lsl#24
	movs m6502_nz,m6502_a,asr#24		;@NZ
	orrmi cycles,cycles,#CYC_C
	fetch 2
;@----------------------------------------------------------------------------
_2C:	;@ BIT $nnnn
;@----------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
;@----------------------------------------------------------------------------
_2D:	;@ AND $nnnn
;@----------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
;@----------------------------------------------------------------------------
_2E:	;@ ROL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
;@----------------------------------------------------------------------------
_2F:	;@ RLA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opRLA
	fetch 6
;@----------------------------------------------------------------------------
_30:	;@ BMI *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_30y:	;@ BMI *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-7
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_31:	;@ AND ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
;@----------------------------------------------------------------------------
_33:	;@ RLA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opRLA
	fetch 8
;@----------------------------------------------------------------------------
_35:	;@ AND $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
;@----------------------------------------------------------------------------
_36:	;@ ROL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
;@----------------------------------------------------------------------------
_37:	;@ RLA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opRLA
	fetch 6
;@----------------------------------------------------------------------------
_38:	;@ SEC
;@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
;@----------------------------------------------------------------------------
_39:	;@ AND $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
;@----------------------------------------------------------------------------
_3B:	;@ RLA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opRLA
	fetch 7
;@----------------------------------------------------------------------------
_3D:	;@ AND $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
;@----------------------------------------------------------------------------
_3E:	;@ ROL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
;@----------------------------------------------------------------------------
_3F:	;@ RLA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opRLA
	fetch 7
;@----------------------------------------------------------------------------
_40:	;@ RTI
;@----------------------------------------------------------------------------
	pop8 r0		;pop 6502 flags and decode
	decodeP
	pop16		;pop the return address
	encodePC
	sub cycles,cycles,#6*CYCLE
	b CheckIRQs
;	fetch 6
;@----------------------------------------------------------------------------
_41:	;@ EOR ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
;@----------------------------------------------------------------------------
_43:	;@ SRE ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSRE
	fetch 8
;@----------------------------------------------------------------------------
_45:	;@ EOR $nn
;@----------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
;@----------------------------------------------------------------------------
_46:	;@ LSR $nn
;@----------------------------------------------------------------------------
	doZ
	opLSR
	fetch 5
;@----------------------------------------------------------------------------
_47:	;@ SRE $nn
;@----------------------------------------------------------------------------
	doZ
	opSRE
	fetch 5
;@----------------------------------------------------------------------------
_48:	;@ PHA
;@----------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
_49:	;@ EOR #$nn
;@----------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
;@----------------------------------------------------------------------------
_4A:	;@ LSR
;@----------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	;@ Z, N=0
	mov m6502_a,m6502_nz,lsl#24		;@ Result without garbage
	orr cycles,cycles,#CYC_C		;@ Prepare C
	fetch_c 2
;@----------------------------------------------------------------------------
_4B:	;@ ASR #$nn
;@----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	and m6502_a,m6502_a,r0,lsl#24
	movs m6502_nz,m6502_a,lsr#25	;@ Z, N=0
	mov m6502_a,m6502_nz,lsl#24		;@ Result without garbage
	orr cycles,cycles,#CYC_C		;@ Prepare C
	fetch_c 2
;@----------------------------------------------------------------------------
_4C:	;@ JMP $nnnn
;@----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	fetch 3
;@----------------------------------------------------------------------------
_4Cx:	;@ JMP $nnnn
;@----------------------------------------------------------------------------
	ldr r2,[r10,#lastbank]
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc],#1
	sub r2,m6502_pc,r2
	orr m6502_pc,r0,r1,lsl#8
	sub r2,m6502_pc,r2
	cmp r2,#-8
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits

	encodePC
	fetch 3
;@----------------------------------------------------------------------------
_4D:	;@ EOR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
;@----------------------------------------------------------------------------
_4E:	;@ LSR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLSR
	fetch 6
;@----------------------------------------------------------------------------
_4F:	;@ SRE $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSRE
	fetch 6
;@----------------------------------------------------------------------------
_50:	;@ BVC *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_V
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_51:	;@ EOR ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
;@----------------------------------------------------------------------------
_53:	;@ SRE ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSRE
	fetch 8
;@----------------------------------------------------------------------------
_55:	;@ EOR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
;@----------------------------------------------------------------------------
_56:	;@ LSR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opLSR
	fetch 6
;@----------------------------------------------------------------------------
_57:	;@ SRE $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSRE
	fetch 6
;@----------------------------------------------------------------------------
_58:	;@ CLI
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I

	eatcycles 2
	bl PrepareIRQCheck
//	ldr r0,CliFixAdr			;@ Check IRQ lines after next instructions
//	str r0,[r10,#nexttimeout]
//	str cycles,[r10,#oldcycles]	;@ Save old cycles so we can use them later on.
//	clearcycles					;@ Clear cycles, save cpu bits

	fetch 0
//CliFixAdr
// .long CLI_fix
;@----------------------------------------------------------------------------
_59:	;@ EOR $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
;@----------------------------------------------------------------------------
_5B:	;@ SRE $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSRE
	fetch 7
;@----------------------------------------------------------------------------
_5D:	;@ EOR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
;@----------------------------------------------------------------------------
_5E:	;@ LSR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLSR
	fetch 7
;@----------------------------------------------------------------------------
_5F:	;@ SRE $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSRE
	fetch 7
;@----------------------------------------------------------------------------
_60:	;@ RTS
;@----------------------------------------------------------------------------
	pop16
	add m6502_pc,m6502_pc,#1
	encodePC
	fetch 6
;@----------------------------------------------------------------------------
_61:	;@ ADC ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
;@----------------------------------------------------------------------------
_63:	;@ RRA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opRRA
	fetch_c 8
;@----------------------------------------------------------------------------
_65:	;@ ADC $nn
;@----------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
;@----------------------------------------------------------------------------
_66:	;@ ROR $nn
;@----------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
;@----------------------------------------------------------------------------
_67:	;@ RRA $nn
;@----------------------------------------------------------------------------
	doZ
	opRRA
	fetch_c 5
;@----------------------------------------------------------------------------
_68:	;@ PLA
;@----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
;@----------------------------------------------------------------------------
_69:	;@ ADC #$nn
;@----------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
;@----------------------------------------------------------------------------
_6A:	;@ ROR
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;@ Get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	;@ NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		;@ Set C
	fetch 2
;@----------------------------------------------------------------------------
_6B:	;@ ARR #$nn
;@----------------------------------------------------------------------------
	doIMM
	opARR
	fetch 2
;@----------------------------------------------------------------------------
_6C:	;@ JMP ($nnnn)
;@----------------------------------------------------------------------------
//	mov r11,r11
//	doABS
	ldrb addy,[m6502_pc],#1
	ldrb r0,[m6502_pc],#1
	orr addy,r0,addy,lsl#24

	add r1,r10,#memmap_tbl
	and r2,addy,#0xE0
	ldr r1,[r1,r2,lsr#3]
	ldrb m6502_pc,[r1,addy,ror#24]
	add addy,addy,#0x01000000
	ldrb r0,[r1,addy,ror#24]
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 5
;@----------------------------------------------------------------------------
_6D:	;@ ADC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
;@----------------------------------------------------------------------------
_6E:	;@ ROR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
;@----------------------------------------------------------------------------
_6F:	;@ RRA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opRRA
	fetch_c 6
;@----------------------------------------------------------------------------
_70:	;@ BVS *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_V
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_71:	;@ ADC ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opADC
	fetch_c 5
;@----------------------------------------------------------------------------
_73:	;@ RRA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opRRA
	fetch_c 8
;@----------------------------------------------------------------------------
_75:	;@ ADC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
;@----------------------------------------------------------------------------
_76:	;@ ROR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
;@----------------------------------------------------------------------------
_77:	;@ RRA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opRRA
	fetch_c 6
;@----------------------------------------------------------------------------
_78:	;@ SEI
;@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
;@----------------------------------------------------------------------------
_79:	;@ ADC $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opADC
	fetch_c 4
;@----------------------------------------------------------------------------
_7B:	;@ RRA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opRRA
	fetch_c 7
;@----------------------------------------------------------------------------
_7D:	;@ ADC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opADC
	fetch_c 4
;@----------------------------------------------------------------------------
_7E:	;@ ROR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
;@----------------------------------------------------------------------------
_7F:	;@ RRA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opRRA
	fetch_c 7
;@----------------------------------------------------------------------------
_81:	;@ STA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
;@----------------------------------------------------------------------------
_83:	;@ SAX ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSAX
	fetch 6
;@----------------------------------------------------------------------------
_84;   STY $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
;@----------------------------------------------------------------------------
_85:	;@ STA $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
;@----------------------------------------------------------------------------
_86:	;@ STX $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
;@----------------------------------------------------------------------------
_87:	;@ SAX $nn
;@----------------------------------------------------------------------------
	doZ
	opSAX
	fetch 3
;@----------------------------------------------------------------------------
_88:	;@ DEY
;@----------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_8A:	;@ TXA
;@----------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_8B:	;@ ANE #$nn
;@----------------------------------------------------------------------------
	readmemimm
	orr m6502_a,m6502_a,#0xEE000000
	and m6502_a,m6502_a,m6502_x
	and m6502_a,m6502_a,r0,lsl#24
	mov m6502_nz,m6502_a,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_8C:	;@ STY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
;@----------------------------------------------------------------------------
_8D:	;@ STA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_8E:	;@ STX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
;@----------------------------------------------------------------------------
_8F:	;@ SAX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSAX
	fetch 4
;@----------------------------------------------------------------------------
_90:	;@ BCC *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_C		;@ Test Carry
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_90y:	;@ BCC *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_C		;@ Test Carry
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-8						;@ Speed hack
	andcs cycles,cycles,#CYC_MASK	;@ Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_91:	;@ STA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
;@----------------------------------------------------------------------------
_93:	;@ SHA ($nn),Y
;@----------------------------------------------------------------------------
	opSHA_IND_Y
	fetch 6
;@----------------------------------------------------------------------------
_94:	;@ STY $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
;@----------------------------------------------------------------------------
_95:	;@ STA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_96:	;@ STX $nn,Y
;@----------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
;@----------------------------------------------------------------------------
_97:	;@ SAX $nn,Y
;@----------------------------------------------------------------------------
	doZIYf
	opSAX
	fetch 4
;@----------------------------------------------------------------------------
_98:	;@ TYA
;@----------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_99:	;@ STA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
;@----------------------------------------------------------------------------
_9A:	;@ TXS
;@----------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb r0,[r10,#m6502_s]
	fetch 2
;@----------------------------------------------------------------------------
_9B:	;@ SHS $nnnn,Y
;@----------------------------------------------------------------------------
	opSHS_ABS_Y
	fetch 5
;@----------------------------------------------------------------------------
_9C:	;@ SHY $nnnn,X
;@----------------------------------------------------------------------------
	opSHY_ABS_X
	fetch 5
;@----------------------------------------------------------------------------
_9D:	;@ STA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 5
;@----------------------------------------------------------------------------
_9E:	;@ SHX $nnnn,Y
;@----------------------------------------------------------------------------
	opSHX_ABS_Y
	fetch 5
;@----------------------------------------------------------------------------
_9F:	;@ SHA $nnnn,Y
;@----------------------------------------------------------------------------
	opSHA_ABS_Y
	fetch 5
;@----------------------------------------------------------------------------
_A0:	;@ LDY #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
;@----------------------------------------------------------------------------
_A1:	;@ LDA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
;@----------------------------------------------------------------------------
_A2:	;@ LDX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
;@----------------------------------------------------------------------------
_A3:	;@ LAX ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opLAX
	fetch 6
;@----------------------------------------------------------------------------
_A4:	;@ LDY $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
;@----------------------------------------------------------------------------
_A5:	;@ LDA $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
;@----------------------------------------------------------------------------
_A6:	;@ LDX $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
;@----------------------------------------------------------------------------
_A7:	;@ LAX $nn
;@----------------------------------------------------------------------------
	doZ
	opLAX
	fetch 3
;@----------------------------------------------------------------------------
_A8:	;@ TAY
;@----------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_A9:	;@ LDA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
;@----------------------------------------------------------------------------
_AA:	;@ TAX
;@----------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_AB:	;@ LXA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLXA
	fetch 2
;@----------------------------------------------------------------------------
_AC:	;@ LDY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
;@----------------------------------------------------------------------------
_AD:	;@ LDA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_AE:	;@ LDX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
;@----------------------------------------------------------------------------
_AF:	;@ LAX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLAX
	fetch 4
;@----------------------------------------------------------------------------
_B0:	;@ BCS *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_C		;Test Carry
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_B0y:	;@ BCS *
;@----------------------------------------------------------------------------
	tst cycles,#CYC_C		;Test Carry
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-8						;speed hack
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_B1:	;@ LDA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	fetch 5
;@----------------------------------------------------------------------------
_B3:	;@ LAX ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opLAX
	fetch 5
;@----------------------------------------------------------------------------
_B4:	;@ LDY $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
;@----------------------------------------------------------------------------
_B5:	;@ LDA $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_B6:	;@ LDX $nn,Y
;@----------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
;@----------------------------------------------------------------------------
_B7:	;@ LAX $nn,Y
;@----------------------------------------------------------------------------
	doZIY
	opLAX
	fetch 4
;@----------------------------------------------------------------------------
_B8:	;@ CLV
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
;@----------------------------------------------------------------------------
_B9:	;@ LDA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_BA:	;@ TSX
;@----------------------------------------------------------------------------
	ldrb m6502_x,[r10,#m6502_s]
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_BB:	;@ LAS $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLAS
	fetch 4
;@----------------------------------------------------------------------------
_BC:	;@ LDY $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_y
	fetch 4
;@----------------------------------------------------------------------------
_BD:	;@ LDA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_a
	fetch 4
;@----------------------------------------------------------------------------
_BE:	;@ LDX $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_x
	fetch 4
;@----------------------------------------------------------------------------
_BF:	;@ LAX $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLAX
	fetch 4
;@----------------------------------------------------------------------------
_C0:	;@ CPY #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2
;@----------------------------------------------------------------------------
_C1:	;@ CMP ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
;@----------------------------------------------------------------------------
_C3:	;@ DCP ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opDCP
	fetch 8
;@----------------------------------------------------------------------------
_C4:	;@ CPY $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
;@----------------------------------------------------------------------------
_C5:	;@ CMP $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
;@----------------------------------------------------------------------------
_C6:	;@ DEC $nn
;@----------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
;@----------------------------------------------------------------------------
_C7:	;@ DCP $nn
;@----------------------------------------------------------------------------
	doZ
	opDCP
	fetch 5
;@----------------------------------------------------------------------------
_C8:	;@ INY
;@----------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_C9:	;@ CMP #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
;@----------------------------------------------------------------------------
_CA:	;@ DEX
;@----------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_CB:	;@ SBX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opSBX
	fetch_c 2
;@----------------------------------------------------------------------------
_CC:	;@ CPY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
;@----------------------------------------------------------------------------
_CD:	;@ CMP $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
;@----------------------------------------------------------------------------
_CE:	;@ DEC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
;@----------------------------------------------------------------------------
_CF:	;@ DCP $nnnn
;@----------------------------------------------------------------------------
	doABS
	opDCP
	fetch 6
;@----------------------------------------------------------------------------
_D0:	;@ BNE *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_D0y:	;@ BNE *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	beq NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-4
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_D1:	;@ CMP ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opCOMP m6502_a
	fetch_c 5
;@----------------------------------------------------------------------------
_D3:	;@ DCP ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opDCP
	fetch 8
;@----------------------------------------------------------------------------
_D5:	;@ CMP $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
;@----------------------------------------------------------------------------
_D6:	;@ DEC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
;@----------------------------------------------------------------------------
_D7:	;@ DCP $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opDCP
	fetch 6
;@----------------------------------------------------------------------------
_D8:	;@ CLD
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
;@----------------------------------------------------------------------------
_D9:	;@ CMP $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opCOMP m6502_a
	fetch_c 4
;@----------------------------------------------------------------------------
_DB:	;@ DCP $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opDCP
	fetch 7
;@----------------------------------------------------------------------------
_DD:	;@ CMP $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opCOMP m6502_a
	fetch_c 4
;@----------------------------------------------------------------------------
_DE:	;@ DEC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
;@----------------------------------------------------------------------------
_DF:	;@ DCP $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opDCP
	fetch 7
;@----------------------------------------------------------------------------
_E0:	;@ CPX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2
;@----------------------------------------------------------------------------
_E1:	;@ SBC ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
;@----------------------------------------------------------------------------
_E3:	;@ ISB ($nn),X
;@----------------------------------------------------------------------------
	doIIX
	opISB
	fetch_c 8
;@----------------------------------------------------------------------------
_E4:	;@ CPX $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
;@----------------------------------------------------------------------------
_E5:	;@ SBC $nn
;@----------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
;@----------------------------------------------------------------------------
_E6:	;@ INC $nn
;@----------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
;@----------------------------------------------------------------------------
_E7:	;@ ISB $nn
;@----------------------------------------------------------------------------
	doZ
	opISB
	fetch_c 5
;@----------------------------------------------------------------------------
_E8:	;@ INX
;@----------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;@----------------------------------------------------------------------------
_E9:	;@ SBC #$nn
;@----------------------------------------------------------------------------
_EB:	;@ SBC #$nn
;@----------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
;@----------------------------------------------------------------------------
_0C:
_1C:
_3C:
_5C:
_7C:
_DC:
_FC:	;@ SKW
;@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
;@----------------------------------------------------------------------------
_14:
_34:
_54:
_74:
_D4:
_F4:	;@ SKB 4 cycles
;@----------------------------------------------------------------------------
	eatcycles 1
;@----------------------------------------------------------------------------
_04:
_44:
_64:	;@ SKB 3 cycles
;@----------------------------------------------------------------------------
	eatcycles 1
;@----------------------------------------------------------------------------
_80:
_82:
_89:
_C2:
_E2:	;@ SKB 2 cycles
;@----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
;@----------------------------------------------------------------------------
_1A:
_3A:
_5A:
_7A:
_DA:
_EA:	;@ NOP
_FA:
;@----------------------------------------------------------------------------
	fetch 2
;@----------------------------------------------------------------------------
_EC:	;@ CPX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
;@----------------------------------------------------------------------------
_ED:	;@ SBC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
;@----------------------------------------------------------------------------
_EE:	;@ INC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
;@----------------------------------------------------------------------------
_EF:	;@ ISB $nnnn
;@----------------------------------------------------------------------------
	doABS
	opISB
	fetch_c 6
;@----------------------------------------------------------------------------
_F0:	;@ BEQ *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_F0y:	;@ BEQ *
;@----------------------------------------------------------------------------
	tst m6502_nz,#0xff
	bne NoBranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-7						;speed hack
	andcs cycles,cycles,#CYC_MASK	;Save CPU bits
	fetch 3
;@----------------------------------------------------------------------------
_F1:	;@ SBC ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSBC
	fetch_c 5
;@----------------------------------------------------------------------------
_F3:	;@ ISB ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opISB
	fetch_c 8
;@----------------------------------------------------------------------------
_F5:	;@ SBC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
;@----------------------------------------------------------------------------
_F6:	;@ INC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
;@----------------------------------------------------------------------------
_F7:	;@ ISB $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opISB
	fetch_c 6
;@----------------------------------------------------------------------------
_F8:	;@ SED
;@----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
;@----------------------------------------------------------------------------
_F9:	;@ SBC $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSBC
	fetch_c 4
;@----------------------------------------------------------------------------
_FB:	;@ ISB $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opISB
	fetch_c 7
;@----------------------------------------------------------------------------
_FD:	;@ SBC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSBC
	fetch_c 4
;@----------------------------------------------------------------------------
_FE:	;@ INC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7
;@----------------------------------------------------------------------------
_FF:	;@ ISB $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opISB
	fetch_c 7


;@----------------------------------------------------------------------------
CheckIRQs:
;@----------------------------------------------------------------------------
	ldrb r0,[r10,#irqPending]
	and r0,r0,#0x04				;@ Save Reset vector
	ldrb r2,[r10,#cia1irqctrl]
	ldrb r1,[r10,#cia1irq]
	ands r2,r2,r1
	orrne r0,r0,#0x01			;@ Normal interrupt (CIA1)
	ldrb r2,[r10,#vicirqenable]
	ldrb r1,[r10,#vicirqflag]
	ands r2,r2,r1
	orrne r0,r0,#0x01			;@ Normal interrupt (VIC)
//	strb r0,[r10,#irqPending]

	tst cycles,#CYC_I
	bicne r0,r0,#1
	tst r0,#7
	bne whichirq				;@ Which interrupt?
;@ - - - - - - - - - - - - - - - - - - -
default_scanlinehook:
	fetch 0

whichirq:
	tst r0,#4
	bicne r0,r0,#4
	ldrne r12,=RST_VECTOR		;@ Reset Vector
	strneb r0,[r10,#irqPending]
	bne irq6502
	tst r0,#2
	bicne r0,r0,#2
	strneb r0,[r10,#irqPending]
	ldrne r12,=NMI_VECTOR		;@ NMI
	bne irq6502
	tst r0,#1
	ldrne r12,=IRQ_VECTOR		;@ IRQ

;@----------------------------------------------------------
irq6502:	 ;@ Needs irq vector in r12
;@----------------------------------------------------------
	ldr r0,[r10,#lastbank]
	sub r0,m6502_pc,r0
	push16						;@ Save PC

	encodeP (R)					;@ Save P
irq_cont:
	push8 r0

	orr cycles,cycles,#CYC_I	;@ Disable IRQ
//	bic cycles,cycles,#CYC_D	;@ and decimal mode

	ldr r0,[r10,#memmap_tbl+7*4]
	ldrb m6502_pc,[r0,r12]!
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC				;@ Get IRQ vector

	fetch 7

;@----------------------------------------------------------------------------
CLI_fix:	;@ Cli should be delayed by 1 instruction.
;@----------------------------------------------------------------------------
	ldr r0,[r10,#oldcycles]
	bic r0,r0,#CYC_MASK			;@ Don't add any cpu bits.
	add cycles,cycles,r0
	ldr r0,[r10,#nexttimeout_]
	str r0,[r10,#nexttimeout]

	b CheckIRQs

;@----------------------------------------------------------------------------
PrepareIRQCheck:
;@----------------------------------------------------------------------------
	adr r0,CLI_fix				;@ Check IRQ lines after next instructions
	str r0,[r10,#nexttimeout]
	str cycles,[r10,#oldcycles]	;@ Save old cycles so we can use them later on.
	clearcycles					;@ Clear cycles, save cpu bits
	bx lr


;@----------------------------------------------------------------------------
//	AREA rom_code, CODE, READONLY
;@----------------------------------------------------------------------------
_xx:	;@ ???					;invalid opcode
;@----------------------------------------------------------------------------
	mov r11,r11
//	[ DEBUG
//		adr r0,_xx
//		mov r1,#0
//		bl debug_
//	]
	fetch 2

	.section .text
;@----------------------------------------------------------------------------
CPU_reset:	;@ Called by loadcart (r0-r9 are free to use)
;@----------------------------------------------------------------------------
	str lr,[sp,#-4]!

;@---Timing
	ldr r1,=63*CYCLE			;@ PAL=63, NTSC=65.
	str r1,[r10,#cyclesperscanline]
	ldr r1,=311					;@ PAL=311, NTSC=262. number of lines=last+1
	str r1,[r10,#lastscanline]
;@---cpu reset
	ldr r8,[r10,#hackflags]
//	adr r2,hackops
//	tst r0,#NOCPUHACK			;@ Load opcode set
//	adrne r2,normalops			;@ This makes all cpuhacks go away if it's choosen.
	adr r2,normalops			;@ This makes all cpuhacks go away if it's choosen.
	tsteq r8,#0x80000000		;@ Check hack flags for nojump hack.
	adreq r1,jmpops
	adrne r1,normalops
	adr r3,opindex
	mov r7,#1
	mov r4,#8					;@ Number of hacks
nr0:
	tst r8,r7,lsl r4
	ldrne r5,[r2,r4,lsl#2]		;@ Hacks
	ldreq r5,[r1,r4,lsl#2]		;@ Normal
	ldr r6,[r3,r4,lsl#2]
	str r5,[r6]
	subs r4,r4,#1
	bpl nr0

	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	add m6502_rmem,r10,#readmem_tbl
	ldr r0,=emu_ram_base
	ldr r0,[r0]
	add r0,r0,#0x100
	add r0,r0,#0x0ff
	str r0,[r10,#m6502_s]		;@ S=FF
	mov cycles,#CYC_I			;@ V=0, D=0, C=0, I=1 disable IRQ.

	str m6502_a,[r10,#frame]	;@ Frame count reset
	str m6502_a,[r10,#irqPending]

	;(clear irq/nmi/res source)...

	ldr r0,[r10,#memmap_tbl+7*4]
	ldr r1,=RST_VECTOR
	ldrb m6502_pc,[r0,r1]!		;@ Get RESET vector
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC

	ldr r0,=irq_scanlinehook
	str r0,[r10,#scanlinehook]

	ldr r0,=cpustate
	stmia r0,{m6502_nz-m6502_pc}
	ldr pc,[sp],#4
normalops:
	.long _10,_30,_4C,_50,_70,_90,_B0,_D0,_F0
jmpops:
	.long _10,_30,_4Cx,_50,_70,_90,_B0,_D0,_F0
hackops:
	.long _10y,_30y,0,0,_70,_90y,_B0y,_D0y,_F0y
opindex:
	.long op_table+0x10*4,op_table+0x30*4,op_table+0x4C*4,op_table+0x50*4,op_table+0x70*4
	.long op_table+0x90*4,op_table+0xB0*4,op_table+0xD0*4,op_table+0xF0*4

;@----------------------------------------------------------------------------
opADC_Dec:
;@----------------------------------------------------------------------------
//	mov r11,r11					;@ No$GBA debugg
	opADCD
	fetch_c 5
;@----------------------------------------------------------------------------
opSBC_Dec:
;@----------------------------------------------------------------------------
//	mov r11,r11					;@ No$GBA debugg
	opSBCD
	fetch 5


;@----------------------------------------------------------------------------

	.section .dtcm
	.global wram_global_base
wram_global_base:
op_table:
	.long _00,_01,_02,_03,_04,_05,_06,_07,_08,_09,_0A,_0B,_0C,_0D,_0E,_0F
	.long _10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1A,_1B,_1C,_1D,_1E,_1F
	.long _20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2A,_2B,_2C,_2D,_2E,_2F
	.long _30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3A,_3B,_3C,_3D,_3E,_3F
	.long _40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_4A,_4B,_4C,_4D,_4E,_4F
	.long _50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_5A,_5B,_5C,_5D,_5E,_5F
	.long _60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_6A,_6B,_6C,_6D,_6E,_6F
	.long _70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_7A,_7B,_7C,_7D,_7E,_7F
	.long _80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_8A,_8B,_8C,_8D,_8E,_8F
	.long _90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_9A,_9B,_9C,_9D,_9E,_9F
	.long _A0,_A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_AA,_AB,_AC,_AD,_AE,_AF
	.long _B0,_B1,_B2,_B3,_B4,_B5,_B6,_B7,_B8,_B9,_BA,_BB,_BC,_BD,_BE,_BF
	.long _C0,_C1,_C2,_C3,_C4,_C5,_C6,_C7,_C8,_C9,_CA,_CB,_CC,_CD,_CE,_CF
	.long _D0,_D1,_D2,_D3,_D4,_D5,_D6,_D7,_D8,_D9,_DA,_DB,_DC,_DD,_DE,_DF
	.long _E0,_E1,_E2,_E3,_E4,_E5,_E6,_E7,_E8,_E9,_EA,_EB,_EC,_ED,_EE,_EF
	.long _F0,_F1,_F2,_F3,_F4,_F5,_F6,_F7,_F8,_F9,_FA,_FB,_FC,_FD,_FE,_FF

	;@ readmem_tbl
	.space 8*4		;$0000-FFFF
	;@ writemem_tbl
	.space 8*4		;$0000-FFFF
	;@ memmap_tbl
rommap:
	.space 8*4		;$0000-FFFF
	;@ mapperdata
;@mapperstate
	.space 8

cpustate:
	;@ Group these together for save/loadstate
	.space 7*4 ;@ cpuregs (nz,c,a,x,y,cycles,pc)
	.long 0 ;@ m6502_s:
	.long 0 ;@ lastbank: last memmap added to PC (used to calculate current PC)

	.long 0 ;@ nexttimeout:  jump here when cycles runs out
	.long 0 ;@ nexttimeout_:  backup of nexttimeout
	.long 0 ;@ oldcycles:  backup of cycles
	.long 0 ;@ scanline
	.long 0 ;@ scanlinehook
	.long 0 ;@ cyclesperscanline (63*CYCLE)
	.long 0 ;@ lastscanline (311)
frametotal:		;@ let ui.c see frame count for savestates
	.long 0 ;@ frame
	.long 0 ;@ irqPending
	.long 0 ;@ hackflags

;@----------------------------------------------------------------------------

