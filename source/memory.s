	#include "equates.h"
	#include "6510.h"
	;INCLUDE gfx.h
	;INCLUDE cart.h

;	.extern Chargen
;	.extern Basic
;	.extern Kernal
	.extern _binary_chargen_rom
	.extern _binary_basic_rom
	.extern _binary_kernal_rom
	.extern BankSwitch_R
	.extern BankSwitch_0_W
	.extern BankSwitch_1_W

	.text mem_read_write
	.global empty_IO_R
	.global empty_R
	.global empty_W
	.global ram_low_R
	.global ram_R
	.global ram_W
	.global ram_low_W
	.global chargen_R
	.global basic_R
	.global kernal_R
;	.global rom_R0
	.global rom_W
	.global bytecopy_
	.global memset_
	.global memorr_
;----------------------------------------------------------------------------
;----------------------------------------------------------------------------
bytecopy_		;void bytecopy(u8 *dst,u8 *src,int count)
;----------------------------------------------------------------------------
	subs r2,r2,#1
	ldrplb r3,[r1,r2]
	strplb r3,[r0,r2]
	bhi bytecopy_
	bx lr

;----------------------------------------------------------------------------
empty_IO_R		;read bad address (error)
;----------------------------------------------------------------------------
	mov r11,r11				;No$GBA debugg
	mov r0,#0x10
	bx lr
;----------------------------------------------------------------------------
empty_R			;read bad address (error)
;----------------------------------------------------------------------------
	mov r11,r11				;No$GBA debugg
	mov r0,#0
	bx lr
;----------------------------------------------------------------------------
empty_W			;write bad address (error)
;----------------------------------------------------------------------------
	mov r11,r11			;No$GBA debugg
	mov r0,#0xBA
	bx lr
;----------------------------------------------------------------------------
rom_W			;write ROM address (error)
;----------------------------------------------------------------------------
	mov r11,r11			;No$GBA debugg
	mov r0,#0xB0
	bx lr
;----------------------------------------------------------------------------
;	AREA wram_code2, CODE, READWRITE
 .section .itcm
;----------------------------------------------------------------------------
ram_R		;ram read ($0000-$FFFF)
;----------------------------------------------------------------------------
	ldrb r0,[cpu_zpage,addy]
	cmp addy,#1
	bxne lr
	b BankSwitch_R
;----------------------------------------------------------------------------
ram_low_R	;ram read ($0000-$00FF)
;----------------------------------------------------------------------------
	ldrb r0,[cpu_zpage,addy,lsr#24]
	cmp addy,#0x01000000
	bxne lr
	b BankSwitch_R
;----------------------------------------------------------------------------
ram_W		;ram write ($0000-$FFFF)
;----------------------------------------------------------------------------
	cmp addy,#1
	strhib r0,[cpu_zpage,addy]
	bxhi lr
	beq BankSwitch_1_W
	b BankSwitch_0_W
;----------------------------------------------------------------------------
ram_low_W	;ram write ($0000-$00FF)
;----------------------------------------------------------------------------
	cmp addy,#0x02000000
	strcsb r0,[cpu_zpage,addy,lsr#24]
	bxcs lr								;greater or equal.
	cmp addy,#0x01000000
	beq BankSwitch_1_W
	b BankSwitch_0_W

;----------------------------------------------------------------------------
basic_R		;rom read
;----------------------------------------------------------------------------
;	ldr r1,=Basic-0xA000
	ldr r1,=_binary_basic_rom-0xA000
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
chargen_R	;rom read
;----------------------------------------------------------------------------
	cmp addy,#0xD000
	ldrmib r0,[cpu_zpage,addy]
	ldrpl r1,=_binary_chargen_rom-0xD000
;	ldrpl r1,=Chargen-0xD000
	ldrplb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
kernal_R	;rom read
;----------------------------------------------------------------------------
;	ldr r1,=Kernal-0xE000
	ldr r1,=_binary_kernal_rom-0xE000
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R0	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R1	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+4]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R2	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+8]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R3	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+12]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R4	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+16]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R5	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+20]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R6	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+24]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
rom_R7	;rom read
;----------------------------------------------------------------------------
	ldr r1,[r10,#memmap_tbl+28]
	ldrb r0,[r1,addy]
	bx lr
;----------------------------------------------------------------------------
;rom_R	;rom read
;----------------------------------------------------------------------------
;	adr r2,memmap_tbl
;	ldr r1,[r2,r1,lsr#11]	;r1=addy & 0xe000
;	ldrb r0,[r1,addy]
;	bx lr
;----------------------------------------------------------------------------
memset_ ;r0=dest r1=data r2=word count
;	exit with r0 & r1 unchanged, r2=0
;----------------------------------------------------------------------------
	subs r2,r2,#1
	strpl r1,[r0,r2,lsl#2]
	bhi memset_
	bx lr
;----------------------------------------------------------------------------
memorr_ ;r0=dest r1=data r2=word count
;	exit with r0 & r1 unchanged, r2=0, r3 trashed
;----------------------------------------------------------------------------
	subs r2,r2,#1
	ldrpl r3,[r0,r2,lsl#2]
	orrpl r3,r3,r1
	strpl r3,[r0,r2,lsl#2]
	bhi memorr_
	bx lr
;----------------------------------------------------------------------------
;	END
